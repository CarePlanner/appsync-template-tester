"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_dynamodb_1 = require("../util-dynamodb");
/**
 * Example responses from:
 * https://docs.aws.amazon.com/appsync/latest/devguide/resolver-util-reference.html#dynamodb-helpers-in-util-dynamodb
 */
describe('string', () => {
    const i = 'foo';
    const expected = { S: 'foo' };
    test('toString', () => {
        const res = util_dynamodb_1.toString(i);
        expect(res).toEqual(expected);
    });
    test('toStringJson', () => {
        const res = util_dynamodb_1.toStringJson(i);
        expect(JSON.parse(res)).toEqual(expected);
    });
    test('toDynamoDB', () => {
        const res = util_dynamodb_1.toDynamoDB(i);
        expect(res).toEqual(expected);
    });
});
describe('number', () => {
    const i = 12345;
    const expected = { N: 12345 };
    test('toNumber', () => {
        const res = util_dynamodb_1.toNumber(i);
        expect(res).toEqual(expected);
    });
    test('toNumberJson', () => {
        const res = util_dynamodb_1.toNumberJson(i);
        expect(JSON.parse(res)).toEqual(expected);
    });
    test('toDynamoDB', () => {
        const res = util_dynamodb_1.toDynamoDB(i);
        expect(res).toEqual(expected);
    });
});
describe('boolean', () => {
    const i = true;
    const expected = { BOOL: true };
    test('toBoolean', () => {
        const res = util_dynamodb_1.toBoolean(i);
        expect(res).toEqual(expected);
    });
    test('toBooleanJson', () => {
        const res = util_dynamodb_1.toBooleanJson(i);
        expect(JSON.parse(res)).toEqual(expected);
    });
    test('toDynamoDB', () => {
        const res = util_dynamodb_1.toDynamoDB(i);
        expect(res).toEqual(expected);
    });
});
describe('list', () => {
    const i = ['foo', 123, { bar: 'baz' }];
    const expected = {
        L: [
            { S: 'foo' },
            { N: 123 },
            {
                M: {
                    bar: { S: 'baz' },
                },
            },
        ],
    };
    test('toList', () => {
        const res = util_dynamodb_1.toList(i);
        expect(res).toEqual(expected);
    });
    test('toListJson', () => {
        const res = util_dynamodb_1.toListJson(i);
        expect(JSON.parse(res)).toEqual(expected);
    });
    test('toDynamoDB', () => {
        const res = util_dynamodb_1.toDynamoDB(i);
        expect(res).toEqual(expected);
    });
});
describe('map', () => {
    const i = { foo: 'bar', baz: 1234, beep: ['boop'] };
    const expected = {
        M: {
            foo: { S: 'bar' },
            baz: { N: 1234 },
            beep: {
                L: [{ S: 'boop' }],
            },
        },
    };
    test('toMap', () => {
        const res = util_dynamodb_1.toMap(i);
        expect(res).toEqual(expected);
    });
    test('toMapJson', () => {
        const res = util_dynamodb_1.toMapJson(i);
        expect(JSON.parse(res)).toEqual(expected);
    });
    test('toDynamoDB', () => {
        const res = util_dynamodb_1.toDynamoDB(i);
        expect(res).toEqual(expected);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC1keW5hbW9kYi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3RzL3V0aWwtZHluYW1vZGIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQVkwQjtBQUUxQjs7O0dBR0c7QUFFSCxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtJQUN0QixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDaEIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFFOUIsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDcEIsTUFBTSxHQUFHLEdBQUcsd0JBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDeEIsTUFBTSxHQUFHLEdBQUcsNEJBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLDBCQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7SUFDdEIsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQ2hCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxF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QUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUN0QixNQUFNLEdBQUcsR0FBRywwQkFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHRvU3RyaW5nLFxuICB0b051bWJlcixcbiAgdG9Cb29sZWFuLFxuICB0b0xpc3QsXG4gIHRvTWFwLFxuICB0b0R5bmFtb0RCLFxuICB0b1N0cmluZ0pzb24sXG4gIHRvTnVtYmVySnNvbixcbiAgdG9Cb29sZWFuSnNvbixcbiAgdG9MaXN0SnNvbixcbiAgdG9NYXBKc29uLFxufSBmcm9tICcuLi91dGlsLWR5bmFtb2RiJztcblxuLyoqXG4gKiBFeGFtcGxlIHJlc3BvbnNlcyBmcm9tOlxuICogaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2FwcHN5bmMvbGF0ZXN0L2Rldmd1aWRlL3Jlc29sdmVyLXV0aWwtcmVmZXJlbmNlLmh0bWwjZHluYW1vZGItaGVscGVycy1pbi11dGlsLWR5bmFtb2RiXG4gKi9cblxuZGVzY3JpYmUoJ3N0cmluZycsICgpID0+IHtcbiAgY29uc3QgaSA9ICdmb28nO1xuICBjb25zdCBleHBlY3RlZCA9IHsgUzogJ2ZvbycgfTtcblxuICB0ZXN0KCd0b1N0cmluZycsICgpID0+IHtcbiAgICBjb25zdCByZXMgPSB0b1N0cmluZyhpKTtcbiAgICBleHBlY3QocmVzKS50b0VxdWFsKGV4cGVjdGVkKTtcbiAgfSk7XG5cbiAgdGVzdCgndG9TdHJpbmdKc29uJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHRvU3RyaW5nSnNvbihpKTtcbiAgICBleHBlY3QoSlNPTi5wYXJzZShyZXMpKS50b0VxdWFsKGV4cGVjdGVkKTtcbiAgfSk7XG5cbiAgdGVzdCgndG9EeW5hbW9EQicsICgpID0+IHtcbiAgICBjb25zdCByZXMgPSB0b0R5bmFtb0RCKGkpO1xuICAgIGV4cGVjdChyZXMpLnRvRXF1YWwoZXhwZWN0ZWQpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnbnVtYmVyJywgKCkgPT4ge1xuICBjb25zdCBpID0gMTIzNDU7XG4gIGNvbnN0IGV4cGVjdGVkID0geyBOOiAxMjM0NSB9O1xuXG4gIHRlc3QoJ3RvTnVtYmVyJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHRvTnVtYmVyKGkpO1xuICAgIGV4cGVjdChyZXMpLnRvRXF1YWwoZXhwZWN0ZWQpO1xuICB9KTtcblxuICB0ZXN0KCd0b051bWJlckpzb24nLCAoKSA9PiB7XG4gICAgY29uc3QgcmVzID0gdG9OdW1iZXJKc29uKGkpO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlcykpLnRvRXF1YWwoZXhwZWN0ZWQpO1xuICB9KTtcblxuICB0ZXN0KCd0b0R5bmFtb0RCJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHRvRHluYW1vREIoaSk7XG4gICAgZXhwZWN0KHJlcykudG9FcXVhbChleHBlY3RlZCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdib29sZWFuJywgKCkgPT4ge1xuICBjb25zdCBpID0gdHJ1ZTtcbiAgY29uc3QgZXhwZWN0ZWQgPSB7IEJPT0w6IHRydWUgfTtcblxuICB0ZXN0KCd0b0Jvb2xlYW4nLCAoKSA9PiB7XG4gICAgY29uc3QgcmVzID0gdG9Cb29sZWFuKGkpO1xuICAgIGV4cGVjdChyZXMpLnRvRXF1YWwoZXhwZWN0ZWQpO1xuICB9KTtcblxuICB0ZXN0KCd0b0Jvb2xlYW5Kc29uJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHRvQm9vbGVhbkpzb24oaSk7XG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzKSkudG9FcXVhbChleHBlY3RlZCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3RvRHluYW1vREInLCAoKSA9PiB7XG4gICAgY29uc3QgcmVzID0gdG9EeW5hbW9EQihpKTtcbiAgICBleHBlY3QocmVzKS50b0VxdWFsKGV4cGVjdGVkKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2xpc3QnLCAoKSA9PiB7XG4gIGNvbnN0IGkgPSBbJ2ZvbycsIDEyMywgeyBiYXI6ICdiYXonIH1dO1xuICBjb25zdCBleHBlY3RlZCA9IHtcbiAgICBMOiBbXG4gICAgICB7IFM6ICdmb28nIH0sXG4gICAgICB7IE46IDEyMyB9LFxuICAgICAge1xuICAgICAgICBNOiB7XG4gICAgICAgICAgYmFyOiB7IFM6ICdiYXonIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gIH07XG5cbiAgdGVzdCgndG9MaXN0JywgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHRvTGlzdChpKTtcbiAgICBleHBlY3QocmVzKS50b0VxdWFsKGV4cGVjdGVkKTtcbiAgfSk7XG5cbiAgdGVzdCgndG9MaXN0SnNvbicsICgpID0+IHtcbiAgICBjb25zdCByZXMgPSB0b0xpc3RKc29uKGkpO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlcykpLnRvRXF1YWwoZXhwZWN0ZWQpO1xuICB9KTtcblxuICB0ZXN0KCd0b0R5bmFtb0RCJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHRvRHluYW1vREIoaSk7XG4gICAgZXhwZWN0KHJlcykudG9FcXVhbChleHBlY3RlZCk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdtYXAnLCAoKSA9PiB7XG4gIGNvbnN0IGkgPSB7IGZvbzogJ2JhcicsIGJhejogMTIzNCwgYmVlcDogWydib29wJ10gfTtcbiAgY29uc3QgZXhwZWN0ZWQgPSB7XG4gICAgTToge1xuICAgICAgZm9vOiB7IFM6ICdiYXInIH0sXG4gICAgICBiYXo6IHsgTjogMTIzNCB9LFxuICAgICAgYmVlcDoge1xuICAgICAgICBMOiBbeyBTOiAnYm9vcCcgfV0sXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdGVzdCgndG9NYXAnLCAoKSA9PiB7XG4gICAgY29uc3QgcmVzID0gdG9NYXAoaSk7XG4gICAgZXhwZWN0KHJlcykudG9FcXVhbChleHBlY3RlZCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3RvTWFwSnNvbicsICgpID0+IHtcbiAgICBjb25zdCByZXMgPSB0b01hcEpzb24oaSk7XG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzKSkudG9FcXVhbChleHBlY3RlZCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3RvRHluYW1vREInLCAoKSA9PiB7XG4gICAgY29uc3QgcmVzID0gdG9EeW5hbW9EQihpKTtcbiAgICBleHBlY3QocmVzKS50b0VxdWFsKGV4cGVjdGVkKTtcbiAgfSk7XG59KTtcbiJdfQ==