"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/prefer-default-export */
const moment_timezone_1 = __importDefault(require("moment-timezone"));
/**
 * Helper function to convert the format string from the vtl format to the moment format
 */
function vtlToMomentFormat(format) {
    var _a;
    return (_a = format) === null || _a === void 0 ? void 0 : _a.replace('dd', 'DD').replace('Z', 'ZZ');
}
function nowISO8601() {
    return moment_timezone_1.default.utc().toISOString();
}
exports.nowISO8601 = nowISO8601;
function nowEpochSeconds() {
    return moment_timezone_1.default().unix();
}
exports.nowEpochSeconds = nowEpochSeconds;
function nowEpochMilliSeconds() {
    return moment_timezone_1.default().valueOf();
}
exports.nowEpochMilliSeconds = nowEpochMilliSeconds;
function nowFormatted(format, timezone = 'utc') {
    const vtlFormatConverted = vtlToMomentFormat(format);
    return moment_timezone_1.default().tz(timezone).format(vtlFormatConverted);
}
exports.nowFormatted = nowFormatted;
function parseFormattedToEpochMilliSecond(time, formatFrom, timezone = 'utc') {
    const reverseFormat = vtlToMomentFormat(formatFrom);
    // AppSync does not parse in strict mode
    return moment_timezone_1.default(time, reverseFormat).tz(timezone).valueOf();
}
exports.parseFormattedToEpochMilliSecond = parseFormattedToEpochMilliSecond;
function parseISO8601ToEpochMilliSeconds(time) {
    // AppSync does not parse in strict mode
    return moment_timezone_1.default(time, 'YYYY-MM-DDTHH:mm:ssZ').valueOf();
}
exports.parseISO8601ToEpochMilliSeconds = parseISO8601ToEpochMilliSeconds;
function epochMilliSecondsToSeconds(time) {
    return moment_timezone_1.default(time).unix();
}
exports.epochMilliSecondsToSeconds = epochMilliSecondsToSeconds;
function epochMilliSecondsToISO8601(time) {
    return moment_timezone_1.default(time).utc().format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
}
exports.epochMilliSecondsToISO8601 = epochMilliSecondsToISO8601;
function epochMilliSecondsToFormatted(time, format, timezone = 'utc') {
    const vtlFormatConverted = vtlToMomentFormat(format);
    return moment_timezone_1.default(time).tz(timezone).format(vtlFormatConverted);
}
exports.epochMilliSecondsToFormatted = epochMilliSecondsToFormatted;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC10aW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3V0aWwtdGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGlEQUFpRDtBQUNqRCxzRUFBcUM7QUFFckM7O0dBRUc7QUFDSCxTQUFTLGlCQUFpQixDQUFDLE1BQWU7O0lBQ3hDLGFBQU8sTUFBTSwwQ0FBRSxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRTtBQUN4RCxDQUFDO0FBRUQsU0FBZ0IsVUFBVTtJQUN4QixPQUFPLHlCQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDcEMsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBZ0IsZUFBZTtJQUM3QixPQUFPLHlCQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN6QixDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQixvQkFBb0I7SUFDbEMsT0FBTyx5QkFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDNUIsQ0FBQztBQUZELG9EQUVDO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLE1BQWMsRUFBRSxXQUFtQixLQUFLO0lBQ25FLE1BQU0sa0JBQWtCLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckQsT0FBTyx5QkFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFIRCxvQ0FHQztBQUVELFNBQWdCLGdDQUFnQyxDQUM5QyxJQUFZLEVBQ1osVUFBa0IsRUFDbEIsV0FBbUIsS0FBSztJQUV4QixNQUFNLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRCx3Q0FBd0M7SUFDeEMsT0FBTyx5QkFBTSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDNUQsQ0FBQztBQVJELDRFQVFDO0FBRUQsU0FBZ0IsK0JBQStCLENBQUMsSUFBWTtJQUMxRCx3Q0FBd0M7SUFDeEMsT0FBTyx5QkFBTSxDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hELENBQUM7QUFIRCwwRUFHQztBQUVELFNBQWdCLDBCQUEwQixDQUFDLElBQVk7SUFDckQsT0FBTyx5QkFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFGRCxnRUFFQztBQUVELFNBQWdCLDBCQUEwQixDQUFDLElBQVk7SUFDckQsT0FBTyx5QkFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFGRCxnRUFFQztBQUVELFNBQWdCLDRCQUE0QixDQUMxQyxJQUFZLEVBQ1osTUFBZSxFQUNmLFdBQW1CLEtBQUs7SUFFeEIsTUFBTSxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRCxPQUFPLHlCQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFQRCxvRUFPQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50LXRpbWV6b25lJztcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY29udmVydCB0aGUgZm9ybWF0IHN0cmluZyBmcm9tIHRoZSB2dGwgZm9ybWF0IHRvIHRoZSBtb21lbnQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIHZ0bFRvTW9tZW50Rm9ybWF0KGZvcm1hdD86IHN0cmluZykge1xuICByZXR1cm4gZm9ybWF0Py5yZXBsYWNlKCdkZCcsICdERCcpLnJlcGxhY2UoJ1onLCAnWlonKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vd0lTTzg2MDEoKSB7XG4gIHJldHVybiBtb21lbnQudXRjKCkudG9JU09TdHJpbmcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vd0Vwb2NoU2Vjb25kcygpIHtcbiAgcmV0dXJuIG1vbWVudCgpLnVuaXgoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vd0Vwb2NoTWlsbGlTZWNvbmRzKCkge1xuICByZXR1cm4gbW9tZW50KCkudmFsdWVPZigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm93Rm9ybWF0dGVkKGZvcm1hdDogc3RyaW5nLCB0aW1lem9uZTogc3RyaW5nID0gJ3V0YycpIHtcbiAgY29uc3QgdnRsRm9ybWF0Q29udmVydGVkID0gdnRsVG9Nb21lbnRGb3JtYXQoZm9ybWF0KTtcbiAgcmV0dXJuIG1vbWVudCgpLnR6KHRpbWV6b25lKS5mb3JtYXQodnRsRm9ybWF0Q29udmVydGVkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRm9ybWF0dGVkVG9FcG9jaE1pbGxpU2Vjb25kKFxuICB0aW1lOiBzdHJpbmcsXG4gIGZvcm1hdEZyb206IHN0cmluZyxcbiAgdGltZXpvbmU6IHN0cmluZyA9ICd1dGMnXG4pIHtcbiAgY29uc3QgcmV2ZXJzZUZvcm1hdCA9IHZ0bFRvTW9tZW50Rm9ybWF0KGZvcm1hdEZyb20pO1xuICAvLyBBcHBTeW5jIGRvZXMgbm90IHBhcnNlIGluIHN0cmljdCBtb2RlXG4gIHJldHVybiBtb21lbnQodGltZSwgcmV2ZXJzZUZvcm1hdCkudHoodGltZXpvbmUpLnZhbHVlT2YoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSVNPODYwMVRvRXBvY2hNaWxsaVNlY29uZHModGltZTogc3RyaW5nKSB7XG4gIC8vIEFwcFN5bmMgZG9lcyBub3QgcGFyc2UgaW4gc3RyaWN0IG1vZGVcbiAgcmV0dXJuIG1vbWVudCh0aW1lLCAnWVlZWS1NTS1ERFRISDptbTpzc1onKS52YWx1ZU9mKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcG9jaE1pbGxpU2Vjb25kc1RvU2Vjb25kcyh0aW1lOiBudW1iZXIpIHtcbiAgcmV0dXJuIG1vbWVudCh0aW1lKS51bml4KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcG9jaE1pbGxpU2Vjb25kc1RvSVNPODYwMSh0aW1lOiBudW1iZXIpIHtcbiAgcmV0dXJuIG1vbWVudCh0aW1lKS51dGMoKS5mb3JtYXQoJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTW1pdJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcG9jaE1pbGxpU2Vjb25kc1RvRm9ybWF0dGVkKFxuICB0aW1lOiBudW1iZXIsXG4gIGZvcm1hdD86IHN0cmluZyxcbiAgdGltZXpvbmU6IHN0cmluZyA9ICd1dGMnXG4pIHtcbiAgY29uc3QgdnRsRm9ybWF0Q29udmVydGVkID0gdnRsVG9Nb21lbnRGb3JtYXQoZm9ybWF0KTtcbiAgcmV0dXJuIG1vbWVudCh0aW1lKS50eih0aW1lem9uZSkuZm9ybWF0KHZ0bEZvcm1hdENvbnZlcnRlZCk7XG59XG4iXX0=